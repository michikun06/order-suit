import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';
import { createContext, useContext } from 'react';
import _pt from 'prop-types';

var PlaceholderContext = createContext({
  animation: ""
});
var Placeholder = function Placeholder(_ref) {
  var children = _ref.children,
      _ref$space = _ref.space,
      space = _ref$space === void 0 ? 3 : _ref$space,
      _ref$animation = _ref.animation,
      animation = _ref$animation === void 0 ? "" : _ref$animation,
      props = _objectWithoutProperties(_ref, ["children", "space", "animation"]);

  return jsx(PlaceholderContext.Provider, {
    value: {
      animation: animation
    }
  }, jsx("div", _extends({
    css: function css(theme) {
      return {
        display: "grid",
        gap: theme.space[space]
      };
    }
  }, props), children));
};
Placeholder.propTypes = {
  animation: _pt.string,
  css: _pt.any
};

var placeholderLineCss = function placeholderLineCss(theme) {
  return {
    background: theme.colors.grey[30],
    height: theme.fontSizes[3]
  };
};

var PlaceholderBox = function PlaceholderBox(_ref2) {
  var _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? "14px" : _ref2$height,
      _ref2$width = _ref2.width,
      width = _ref2$width === void 0 ? "100%" : _ref2$width,
      _ref2$radii = _ref2.radii,
      radii = _ref2$radii === void 0 ? 2 : _ref2$radii,
      props = _objectWithoutProperties(_ref2, ["height", "width", "radii"]);

  var _React$useContext = useContext(PlaceholderContext),
      animation = _React$useContext.animation;

  return jsx("div", _extends({
    css: function css(theme) {
      return [placeholderLineCss(theme), {
        width: width,
        height: height,
        borderRadius: theme.radii[radii],
        animation: animation
      }];
    }
  }, props));
};
PlaceholderBox.propTypes = {
  width: _pt.string,
  height: _pt.string,
  noSpace: _pt.bool,
  radii: _pt.number,
  css: _pt.any
};
Placeholder.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Placeholder",
  "props": {
    "space": {
      "defaultValue": {
        "value": "3",
        "computed": false
      },
      "required": false
    },
    "animation": {
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      },
      "required": false
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/Placeholder/Placeholder.tsx"] = {
    name: "Placeholder",
    docgenInfo: Placeholder.__docgenInfo,
    path: "src/components/Placeholder/Placeholder.tsx"
  };
}

PlaceholderBox.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "PlaceholderBox",
  "props": {
    "height": {
      "defaultValue": {
        "value": "\"14px\"",
        "computed": false
      },
      "required": false
    },
    "width": {
      "defaultValue": {
        "value": "\"100%\"",
        "computed": false
      },
      "required": false
    },
    "radii": {
      "defaultValue": {
        "value": "2",
        "computed": false
      },
      "required": false
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/Placeholder/Placeholder.tsx"] = {
    name: "PlaceholderBox",
    docgenInfo: PlaceholderBox.__docgenInfo,
    path: "src/components/Placeholder/Placeholder.tsx"
  };
}

export { Placeholder, PlaceholderBox };
//# sourceMappingURL=Placeholder.esm.js.map
